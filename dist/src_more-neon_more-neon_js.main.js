"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkneonshopspb"] = self["webpackChunkneonshopspb"] || []).push([["src_more-neon_more-neon_js"],{

/***/ "./src/more-neon/more-neon.js":
/*!************************************!*\
  !*** ./src/more-neon/more-neon.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var swiper_bundle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swiper/bundle */ \"./node_modules/swiper/swiper-bundle.mjs\");\n/* harmony import */ var _data_products__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data_products */ \"./src/more-neon/data_products.js\");\n\r\n\r\n\r\nconsole.log(_data_products__WEBPACK_IMPORTED_MODULE_1__.combinedArray);\r\n\r\nlet price_more_block = document.querySelector(\"#block_more_price\");\r\n\r\nlet currentPage = 1; // Инициализация переменной currentPage с начальным значением 1\r\n\r\nconst itemsPerPage = 6; // Константа, определяющая количество элементов на каждой странице\r\n\r\nconst paginationWrapper = document.querySelector(\"#pagination\"); // Поиск и сохранение элемента с id \"pagination\" в переменной paginationWrapper\r\n\r\nfunction createPaginatedItems(items) { // Объявление функции для создания пагинированных элементов из переданного массива items\r\n  return items.reduce((acc, item, index) => { // Использование функции reduce для разделения элементов на страницы\r\n    const pageIndex = Math.floor(index / itemsPerPage); // Вычисление номера страницы для текущего элемента\r\n    if (!acc[pageIndex]) { // Если текущей страницы не существует, создаем пустой массив\r\n      acc[pageIndex] = [];\r\n    }\r\n    acc[pageIndex].push(item); // Добавляем элемент в соответствующую страницу\r\n    return acc;\r\n  }, []); // Начальное значение аккумулятора - пустой массив\r\n}\r\n\r\nfunction displayItems(page) { // Объявление функции для отображения элементов текущей страницы\r\n  const paginatedItems = createPaginatedItems(_data_products__WEBPACK_IMPORTED_MODULE_1__.combinedArray); // Создание пагинированных элементов из объединенного массива combinedArray\r\n  price_more_block.innerHTML = ''; // Очистка текущего блока товаров\r\n  if (page < 1 || page > paginatedItems.length) return; // Проверка на правильность номера страницы\r\n  paginatedItems[page - 1].forEach(item => { // Для каждого элемента на текущей странице\r\n    let card_price = document.createElement('div'); // Создаем элемент div для карточки товара\r\n    card_price.className = \"card-more-neon\"; // Добавляем класс стиля карточки\r\n    card_price.innerHTML = `\r\n    <img src=\"${item.image}\" alt=\"${item.title}\">\r\n    <p class=\"title-card-neon\">${item.title}</p>\r\n    <p class=\"description-title\">Основание:</p>\r\n    <p class=\"description-title-more\">${item.discription}</p>\r\n    <p class=\"description-title\">Размер основания:</p>\r\n    <p class=\"description-title-more\">${item.size}</p>\r\n    <p class=\"price-neon-more\"><span>Цена:</span>${item.price}</p>\r\n    <button class=\"order-price-more\" data-id=\"${item.id}\">Заказать</button>\r\n`;\r\n    price_more_block.appendChild(card_price); // Добавляем карточку в блок товаров\r\n\r\n    \r\n\r\n  });\r\n  updatePagination(paginatedItems.length); // Обновление пагинации\r\n  \r\n  // Находим все кнопки \"Заказать\" с классом \"order-price-more\"\r\nconst orderPriceButtons = document.querySelectorAll('.order-price-more');\r\n\r\n\r\norderPriceButtons.forEach(button => {\r\n    button.addEventListener('click', function () {\r\n        const productId = button.getAttribute('data-id'); // Получаем data-id кнопки на которую нажали\r\n        const product = _data_products__WEBPACK_IMPORTED_MODULE_1__.combinedArray.find(item => item.id.toString() === productId.toString());\r\n        console.log(productId);\r\n        console.log(_data_products__WEBPACK_IMPORTED_MODULE_1__.combinedArray);\r\n        \r\n        console.log(product);\r\n\r\n        openModal(product);\r\n    });\r\n});\r\n\r\nfunction openModal(product) {\r\n   \r\n  \r\n    if (product) {\r\n        const modalTitle = document.querySelector('#exampleModalLabelNew');\r\n        modalTitle.textContent = product.title || 'Название не указано';\r\n  \r\n        const modalBody = document.querySelector('#exampleModalNew .modal-body');\r\n        modalBody.innerHTML = `\r\n            <div id=\"carouselExample\" class=\"carousel slide\">\r\n                <div class=\"carousel-inner\">\r\n                    <div class=\"carousel-item active\">\r\n                        <img src=\"${product.image}\" alt=\"Product Image\">\r\n                    </div>\r\n                    <div class=\"carousel-item\">\r\n                        <img src=\"${product.image2}\" alt=\"Product Image\">\r\n                    </div>\r\n                </div>\r\n                <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"prev\">\r\n                    <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                    <span class=\"visually-hidden\">Previous</span>\r\n                </button>\r\n                <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExample\" data-bs-slide=\"next\">\r\n                    <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                    <span class=\"visually-hidden\">Next</span>\r\n                </button>\r\n            </div>\r\n            <p class=\"decription-product\"><strong>Основание:</strong> ${product.discription || 'Описание отсутствует'}</p>\r\n            <p class=\"decription-product\"><strong>Размер основания:</strong> ${product.size || 'Размер не указан'}</p>\r\n            <p class=\"decription-product\"><strong>Цена:</strong> ${product.price || 'Цена не указана'}</p>\r\n            <form class=\"form-header\" action=\"\">\r\n                <label for=\"name\">Ваше Имя</label>\r\n                <input id=\"name\" type=\"text\" placeholder=\"Введите Имя\">\r\n                <label for=\"phone\">Ваш телефон</label>\r\n                <input id=\"phone\" type=\"tel\" placeholder=\"Введите телефон\">\r\n            </form>\r\n        `;\r\n  \r\n        const carousel = new bootstrap.Carousel(document.querySelector('#carouselExample'), {\r\n            interval: false // Чтобы карусель не переключалась автоматически\r\n        });\r\n  \r\n        const myModal = new bootstrap.Modal(document.getElementById('exampleModalNew'), {\r\n            keyboard: false\r\n        });\r\n  \r\n        myModal.show();\r\n    } else {\r\n        console.error('Продукт с указанным productId не найден.');\r\n    }\r\n  }\r\n  \r\n\r\n\r\n}\r\n\r\nfunction updatePagination(numberOfPages) { // Обновление элементов пагинации\r\n  paginationWrapper.innerHTML = ''; // Очистка текущих элементов пагинации\r\n  for (let i = 1; i <= numberOfPages; i++) { // Создание кнопок для каждой страницы\r\n    const pageButton = document.createElement('button'); // Создание элемента кнопки\r\n    pageButton.innerText = i; // Установка текста на кнопке\r\n    pageButton.addEventListener('click', () => { // Добавление обработчика события на клик по кнопке\r\n      currentPage = i; // Обновление текущей страницы\r\n      displayItems(currentPage); // Перерисовка элементов для выбранной страницы\r\n      highlightCurrentPage(); // Выделение текущей страницы\r\n    });\r\n    paginationWrapper.appendChild(pageButton); // Добавление кнопки в пагинацию\r\n  }\r\n  highlightCurrentPage(); // Выделение текущей страницы\r\n}\r\n\r\nfunction highlightCurrentPage() { // Выделение текущей страницы в пагинации\r\n  const buttons = paginationWrapper.querySelectorAll('button'); // Получаем все кнопки пагинации\r\n  buttons.forEach(button => { // Для каждой кнопки\r\n    if (Number(button.innerText) === currentPage) { // Если номер кнопки совпадает с текущей страницей\r\n      button.style.fontWeight = 'bold'; // Выделяем текст жирным шрифтом\r\n      button.style.backgroundColor = '#D012FF'; // Меняем цвет фона кнопки\r\n      button.style.border = '#D012FF'; // Меняем цвет фона кнопки\r\n    } else {\r\n      button.style.fontWeight = 'normal'; // Сбрасываем выделение\r\n      button.style.backgroundColor = ''; // Сбрасываем цвет фона\r\n    }\r\n  });\r\n}\r\n\r\ndisplayItems(currentPage); // Инициализация отображения первой страницы\r\n\r\n\r\n\n\n//# sourceURL=webpack://neonshopspb/./src/more-neon/more-neon.js?");

/***/ })

}]);